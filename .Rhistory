Age.cat
Age.cat <- cut(Age, breaks = seq(15, 75, 10))
Age.tab <- table(Age.cat)
Age.tab
barplot(Age.tab)                                     # bar chart
pie(Age.tab)                                         # pie chart
Age2.cat <- factor(as.integer(Age < 55))
levels(Age2.cat) <- c("over55","under55")
TypeOfJob.Age <- table(TypeOfJob, Age.cat)          # contingency table
TypeOfJob.Age
margin.table(TypeOfJob.Age, 1)                      # row sums
margin.table(TypeOfJob.Age, 2)                      # column sums
prop.table(TypeOfJob.Age)                           # relative freqencies
round(prop.table(TypeOfJob.Age), digits=3)          # idem, rounded to 3 digits
round(prop.table(TypeOfJob.Age) * 100, digits=3)    # total percentages
round(prop.table(TypeOfJob.Age, 1), digits=3)       # table of relative frequencies (row-wise)
TypeOfJob.Age.rel <- round(prop.table(TypeOfJob.Age, 2), digits=3)      # table of relative frequencies (column-wise)
barplot(TypeOfJob.Age)                                # basic stacked bar chart
margin.table(TypeOfJob.Age, 1)                      # row sums
margin.table(TypeOfJob.Age, 2)                      # column sums
prop.table(TypeOfJob.Age)                           # relative freqencies
round(prop.table(TypeOfJob.Age), digits=3)          # idem, rounded to 3 digits
round(prop.table(TypeOfJob.Age) * 100, digits=3)    # total percentages
round(prop.table(TypeOfJob.Age, 1), digits=3)       # table of relative frequencies (row-wise)
TypeOfJob.Age.rel <- round(prop.table(TypeOfJob.Age, 2), digits=3)      # table of relative frequencies (column-wise)
barplot(TypeOfJob.Age)                                # basic stacked bar chart
barplot(TypeOfJob.Age.rel, yaxt="n", xlab="Age", ylab="proportion",
col = c("white", "grey80", "grey40", "black"),
main = "TypeOfJob by Age", xlim=c(0,9))          # stacked bar chart
legend("bottomleft", legend=rownames(TypeOfJob.Age.rel), col="black",
fill = c("white", "grey80", "grey40", "black"), cex=0.65)
axis(2, at=seq(0, 1, 0.2))
barplot(TypeOfJob.Age.rel, beside = TRUE)                            # grouped bar chart
par(mfrow=c(1,2))
plot (AmountRequested, Capital, main = "Amount req. vs. Market price",
cex = .5, col = "dark red")
plot (log10(AmountRequested), log10(Capital+1), main = "Amount req. vs. Market price (better)", cex = .5, col = "dark red")
abline(v = mean(log10(AmountRequested)), lty = 2, col = "grey40")
abline(h = mean(log10(Capital+1)), lty = 2, col = "grey40")
abline(lm(log10(Capital+1) ~ log10(AmountRequested)), col = "blue")
par(mfrow=c(1,1))
plot (TypeOfJob, AmountRequested)
plot (Age,Assessment, col="red") # WARNING!
plot (Assessment, Age, col="red") # better
hist.with.normal <- function (x, main, xlabel=deparse(substitute(x)), ...)
{
h <- hist(x,plot=F, ...)
s <- sd(x)
m <- mean(x)
ylim <- range(0,h$density,dnorm(0,sd=s))
hist(x,freq=FALSE,ylim=ylim,xlab=xlabel, main=main, ...)
curve(dnorm(x,m,s),add=T,col="red")
}
hist.with.normal (Expenses, "Expenses")
par(mfrow=c(2,4))
for (i in 0:7)
{ plot(density(Credit.new[,i+9]), xlab="", main=names(Credit.new)[i+9]) }
library(MASS)
par(mfrow=c(1,3))
hist(Capital, main="Look at that ...")
bx <- boxcox(I(Capital+1) ~ . - Assessment, data = Credit.new,
lambda = seq(-0.25, 0.25, length = 10))
lambda <- bx$x[which.max(bx$y)]
Capital.BC <- (Capital^lambda - 1)/lambda
hist(Capital.BC, main="Look at that now!")
par (mfrow=c(1,1))
set.seed (104)
Credit.new <- Credit.new[sample.int(nrow(Credit.new)),]
save(Credit.new, file = "Credsco-processed.Rdata")
# remove (almost) everything in the working environment
rm(list = ls())
load("Credsco-processed.Rdata")
objects()
source('~/.active-rstudio-document')
library(datasets)
library(ggplot2)
library(caret)
library(doMC)
registerDoMC(cores = 4)
library(doMC)
data(rock)
rock.df <- data.frame(area  = scale(rock$area),
perim = scale(rock$peri),
shape = scale(rock$shape),
perm  = log(rock$perm))
split = sample.split(rock.df$perm, SplitRatio = 0.8)
training.set = subset(rock.df, split == TRUE)
test.set = subset(rock.df, split == FALSE)
install.packages('caTools')
library(datasets)
library(caTools)
library(ggplot2)
library(caret)
data(rock)
rock.df <- data.frame(area  = scale(rock$area),
perim = scale(rock$peri),
shape = scale(rock$shape),
perm  = log(rock$perm))
split = sample.split(rock.df$perm, SplitRatio = 0.8)
training.set = subset(rock.df, split == TRUE)
test.set = subset(rock.df, split == FALSE)
trc <- trainControl(method = 'LOOCV')
sizes <- seq(1, 15, by = 1)
decays <- 10^seq(-3, 0, by = 0.2)
nnet.model <- train(perm ~ .,
data = training.set,
linout = TRUE, trace = FALSE,
method = 'nnet', metric = 'RMSE',
trControl = trc, maxit = 2000,
tuneGrid = expand.grid(.size = sizes,
.decay = decays))
mnet.model <-nnet(perm ~ .,
data = training.set,
linout = TRUE, trace = FALSE,
method = 'nnet', metric = 'RMSE',maxit = 2000,size=3,decay=0.1)
library(nnet)
mnet.model <-nnet(perm ~ .,
data = training.set,
linout = TRUE, trace = FALSE,
method = 'nnet', metric = 'RMSE',maxit = 2000,size=3,decay=0.1)
nnet(perm ~ .,
data = training.set,
linout = TRUE, trace = FALSE,
method = 'nnet', metric = 'RMSE',maxit = 2000,size=3,decay=0.1)
nnet.model <- train(perm ~ .,
data = training.set,
linout = TRUE,
method = 'nnet', metric = 'RMSE',
trControl = trc, maxit = 2000,
tuneGrid = expand.grid(.size = sizes,
.decay = decays))
mnet.model <-nnet(perm ~ .,
data = training.set,
linout = TRUE, trace = FALSE,
method = 'nnet', metric = 'RMSE',maxit = 2000,size=3,decay=0.1)
mnet.model <-nnet(perm ~ .,
data = training.set,
linout = TRUE,
method = 'nnet', metric = 'RMSE',maxit = 2000,size=3,decay=0.1)
mnet.model <-nnet(perm ~ .,
data = training.set,
linout = TRUE,
method = 'nnet', metric = 'RMSE',maxit = 2000,size=5,decay=0.1)
data
training.set
training.set[1,2]
training.set[1,]
training.set[,1]
training.set
training.set$perim <- NULL
training.set
nnet.model <- train(perm ~ .,
data = training.set,
linout = TRUE,
method = 'nnet', metric = 'RMSE',
trControl = trc, maxit = 2000,
tuneGrid = expand.grid(.size = sizes,
.decay = decays))
nnet.model <- train(perm ~ .,
data = training.set,
linout = TRUE,
method = 'nnet', metric = 'RMSE',
trControl = trc, maxit = 2000,
tuneGrid = expand.grid(.size = sizes,
.decay = decays))
mnet.model <-nnet(perm ~ .,
data = training.set,
linout = TRUE,
method = 'nnet', metric = 'RMSE',maxit = 2000,size=5,decay=0.1)
mnet.model <-nnet(perm ~ .,
data = training.set,
linout = TRUE,
method = 'nnet', metric = 'RMSE',maxit = 2000,size=5)
mnet.model <-nnet(perm ~ .,
data = training.set,
linout = TRUE,
method = 'nnet', metric = 'RMSE',maxit = 2000,size=5)
,decay=0.1
mnet.model <-nnet(perm ~ .,
data = training.set,
linout = TRUE,
method = 'nnet', metric = 'RMSE',maxit = 2000,size=5,decay=0.1)
mnet.model <-nnet(perm ~ .,
data = training.set,
linout = TRUE,
method = 'nnet', metric = 'RMSE',maxit = 2000,size=7,decay=0.1)
mnet.model <-nnet(perm ~ .,
data = training.set,
linout = TRUE,
method = 'nnet', metric = 'RMSE',maxit = 2000,size=5,decay=0.1)
mnet.model <-nnet(perm ~ .,
data = training.set,
linout = TRUE,
method = 'nnet', metric = 'RMSE',maxit = 2000,size=10,decay=0.1,)
mnet.model <-nnet(perm ~ .,
data = training.set,
linout = TRUE,
method = 'nnet', metric = 'RMSE',maxit = 2000,size=100,decay=0.1,)
mnet.model <-nnet(perm ~ .,
data = training.set,
linout = TRUE,
method = 'nnet', metric = 'RMSE',maxit = 2000,size=200,decay=0.1,)
mnet.model <-nnet(perm ~ .,
data = training.set,
linout = TRUE,
method = 'nnet', metric = 'RMSE',maxit = 2000,size=5,decay=0.1,skip=TRUE)
mnet.model <-nnet(perm ~ .,
data = training.set,
linout = TRUE,
method = 'nnet', metric = 'RMSE',maxit = 2000,size=4,decay=0.1,skip=TRUE)
mnet.model <-nnet(perm ~ .,
data = training.set,
linout = TRUE,
method = 'nnet', metric = 'RMSE',maxit = 2000,size=3,decay=0.1,skip=TRUE)
mnet.model <-nnet(perm ~ .,
data = training.set,
linout = TRUE,
method = 'nnet', metric = 'RMSE',maxit = 2000,size=5,decay=0.1,skip=FALSE)
set.seed(123)
mnet.model <-nnet(perm ~ .,
data = training.set,
linout = TRUE,
method = 'nnet', metric = 'RMSE',maxit = 2000,size=5,decay=0.1,skip=FALSE)
nnet.model <- train(perm ~ .,
data = training.set,
linout = TRUE,
method = 'nnet', metric = 'RMSE',
trControl = trc, maxit = 2000,
tuneGrid = expand.grid(.size = sizes,
.decay = decays))
mnet.model <-nnet(perm ~ .,
data = training.set,
linout = TRUE,
method = 'nnet', metric = 'RMSE',maxit = 2000,size=5,decay=0.1,skip=FALSE)
nnet.model <- train(perm ~ .,
data = training.set,
linout = TRUE,
method = 'nnet', metric = 'RMSE',
trControl = trc, maxit = 2000,
tuneGrid = expand.grid(.size = sizes,
.decay = decays))
set.seed(123)
mnet.model <-nnet(perm ~ .,
data = training.set,
linout = TRUE,
method = 'nnet', metric = 'RMSE',maxit = 2000,size=5,decay=0.1,skip=FALSE)
nnet.model <- train(perm ~ .,
data = training.set,
linout = TRUE,
method = 'nnet', metric = 'RMSE',
trControl = trc, maxit = 2000,
tuneGrid = expand.grid(.size = sizes,
.decay = decays))
mnet.model <-nnet(perm ~ .,
data = training.set,
linout = TRUE,
method = 'nnet', metric = 'RMSE',maxit = 2000,size=5,decay=0.1,skip=FALSE)
mnet.model <-nnet(perm ~ .,
data = training.set,
linout = TRUE,
method = 'nnet', metric = 'RMSE',maxit = 2000,size=5,decay=0.1,skip=FALSE)
mnet.model <-nnet(perm ~ .,
data = training.set,
linout = TRUE,
method = 'nnet', metric = 'RMSE',maxit = 2000,size=5,decay=0.1,skip=FALSE)
mnet.model <-nnet(perm ~ .,
data = training.set,
linout = TRUE,
method = 'nnet', metric = 'RMSE',maxit = 2000,size=5,decay=0.1,skip=FALSE)
set.seed(123)
mnet.model <-nnet(perm ~ .,
data = training.set,
linout = TRUE,
method = 'nnet', metric = 'RMSE',maxit = 2000,size=5,decay=0.1,skip=FALSE)
model.nnet <- nnet(admit ~., data = Admis, subset=learn, size=3, maxit=200, decay=0)
library(MASS)
library(nnet)
set.seed (4567)
Admis <- read.csv("Admissions.csv")
## view the first few rows of the data
head(Admis)
nnet.model <- train(perm ~ .,
data = training.set,
linout = TRUE, trace = FALSE,
method = 'nnet', metric = 'RMSE',
trControl = trc, maxit = 2000,
tuneGrid = expand.grid(.size = sizes,
.decay = decays))
Admis$admit <- factor(Admis$admit, labels=c("No","Yes"))
summary(Admis)
n <- nrow(Admis)
set.seed(43)
learn <- sample(1:n, round(2*n/3))
nlearn <- length(learn)
ntest <- n - nlearn
model.logreg <- glm (admit~., data=Admis[learn,], family=binomial)
summary(model.logreg)
model.logreg2 <- step(model.logreg)
exp(model.logreg2$coefficients)
glfpred=NULL
glfpred[model.logreg2$fitted.values<0.5]=0
glfpred[model.logreg2$fitted.values>=0.5]=1
table(Admis$admit[learn],glfpred)
(error_rate.learn <- 100*(1-sum(diag(table(Admis$admit[learn],glfpred)))/nlearn))
glft = predict(model.logreg2, newdata=Admis[-learn,])
pt = 1/(1+exp(-glft))
glfpredt = NULL
glfpredt[pt<0.5]=0
glfpredt[pt>=0.5]=1
table(Admis$admit[-learn],glfpredt)
(error_rate.test <- 100*(1-sum(diag(table(Admis$admit[-learn],glfpredt)))/ntest))
?nnet
Admis$gpa <- scale(Admis$gpa)
Admis$gre <- scale(Admis$gre)
Admis$rank <- scale(Admis$rank)
model.nnet <- nnet(admit ~., data = Admis, subset=learn, size=3, maxit=200, decay=0)
model.nnet <- nnet(admit ~., data = Admis, subset=learn, size=3, maxit=200, decay=0)
setwd("~/Downloads/APA-L5")
library(MASS)
library(nnet)
set.seed (4567)
Admis <- read.csv("Admissions.csv")
## view the first few rows of the data
head(Admis)
nnet.model <- train(perm ~ .,
data = training.set,
linout = TRUE, trace = FALSE,
method = 'nnet', metric = 'RMSE',
trControl = trc, maxit = 2000,
tuneGrid = expand.grid(.size = sizes,
.decay = decays))
Admis$admit <- factor(Admis$admit, labels=c("No","Yes"))
summary(Admis)
n <- nrow(Admis)
set.seed(43)
learn <- sample(1:n, round(2*n/3))
nlearn <- length(learn)
ntest <- n - nlearn
model.logreg <- glm (admit~., data=Admis[learn,], family=binomial)
summary(model.logreg)
model.logreg2 <- step(model.logreg)
exp(model.logreg2$coefficients)
glfpred=NULL
glfpred[model.logreg2$fitted.values<0.5]=0
glfpred[model.logreg2$fitted.values>=0.5]=1
table(Admis$admit[learn],glfpred)
(error_rate.learn <- 100*(1-sum(diag(table(Admis$admit[learn],glfpred)))/nlearn))
glft = predict(model.logreg2, newdata=Admis[-learn,])
pt = 1/(1+exp(-glft))
glfpredt = NULL
glfpredt[pt<0.5]=0
glfpredt[pt>=0.5]=1
table(Admis$admit[-learn],glfpredt)
(error_rate.test <- 100*(1-sum(diag(table(Admis$admit[-learn],glfpredt)))/ntest))
?nnet
Admis$gpa <- scale(Admis$gpa)
Admis$gre <- scale(Admis$gre)
Admis$rank <- scale(Admis$rank)
model.nnet <- nnet(admit ~., data = Admis, subset=learn, size=3, maxit=200, decay=0)
model.nnet <- nnet(admit ~., data = Admis, subset=learn, size=2, maxit=200, decay=0)
model.nnet <- nnet(admit ~., data = Admis, subset=learn, size=5, maxit=200, decay=0)
Admis$rank <- NULL
model.nnet <- nnet(admit ~., data = Admis, subset=learn, size=5, maxit=200, decay=0)
model.nnet <- nnet(admit ~., data = Admis, subset=learn, size=5, maxit=200, decay=0)
ncol(Admis)
model.nnet <- nnet(admit ~., data = Admis, subset=learn, size=5, maxit=200, decay=0.1)
model.nnet <- nnet(admit ~., data = Admis, subset=learn, size=5, maxit=200, skip=TRUE)
model.nnet <- nnet(admit ~., data = Admis, subset=learn, size=4, maxit=200, skip=TRUE)
model.nnet <- nnet(admit ~., data = Admis, subset=learn, size=5, maxit=200, skip=FALSE)
setwd("~/Universitat/7/APA/problemes/llista4/grupal")
read.table(file, header = FALSE, sep = " ")
file <- "letters.txt"
read.table(file, header = FALSE, sep = " ")
data <- read.table(file, header = FALSE, sep = " ")
colnames(data)[36] <- "label"
data <- read.table(file, header = FALSE, sep = " ")
colnames(data)[36] <- "label"
data
ppois(16, lambda=12)
ppois(16, lambda=1.01)
ppois(16, lambda=1.01)
ppois(16, lambda=1.01)
ppois(16, lambda=1.01)
ppois(35, lambda=1.01)
ppois(35, lambda=1.01)
ppois(35, lambda=1.01)
ppois(35, lambda=1.01)
ppois(35, lambda=1.01)
ppois(35, lambda=1.01)
rpois(100, 6.5)
rpois(100, 1.01)
rpois(1.01)
rpois(lambda=1.01)
rpois(n=1,lambda=1.01)
rpois(n=1,lambda=1.01)
rpois(n=1,lambda=1.01)
rpois(n=1,lambda=1.01)
rpois(n=1,lambda=1.01)
rpois(n=1,lambda=1.01)
rpois(n=1,lambda=1.01)
rpois(n=1,lambda=1.01)
rpois(n=1,lambda=1.01)
rpois(n=1,lambda=1.01)
rpois(n=1,lambda=1.01)
rpois(n=1,lambda=1.01)
x <- rpois(n=1,lambda=1.01)
x
1
sample(c(2,1),1)
sample(c(2,1),1)
sample(c(2,1),1)
sample(c(2,1),2)
c(1,2,3)[1,2]
l = c(1,0,1,0)
l[1,2]
l[c(1,2)]
if TRUE then 1
if(a==1) 1 else 2
if(1==1) 1 else 2
mapply((function (x) if(x==1) 0 else 1),l[c(1,2)])
source('~/Universitat/7/APA/problemes/llista4/grupal/script.R')
data.frame()
source('~/Universitat/7/APA/problemes/llista4/grupal/script.R')
corrompreLletra(data[1])
corrompreLletra(data[1])
source('~/Universitat/7/APA/problemes/llista4/grupal/script.R')
corrompreLletra(data[1])
lletraCorrupta <- data[1]
lletraCorrupta
corrompreLletra(data[,1])
corrompreLletra(data[,1])
corrompreLletra(data[,1])
corrompreLletra(data[,1])
corrompreLletra(data[,1])
corrompreLletra(data[,1])
corrompreLletra(data[,1])
corrompreLletra(data[,1])
data[,1]
corrompreLletra(data[,1])
corrompreLletra(data[,1])
file <- "letters.txt"
data <- read.table(file, header = FALSE, sep = " ")
colnames(data)[36] <- "label"
data
data[,1]
data[1,]
data[2,]
corrompreLletra(data[1,])
lletraCorrupta <- data[1,]
lletraCorrupta
nBitsCorruptes <- rpois(n=1,lambda=1.01)
nBitsCorruptes
bitsACorrompre <- sample(lletraCorrupta,nBitsCorruptes)
bitsACorrompre
lletraCorrupta[1,]
lletraCorrupta[1]
as.list(lletraCorrupta)
as.list(lletraCorrupta[1,])
as.list(lletraCorrupta[1])
as.vector(lletraCorrupta)
as.vector(lletraCorrupta)[1]
as.numeric(as.vector(data[1,]))
length(as.numeric(as.vector(data[1,])))
length(as.numeric(as.vector(data[1,1:35])))
source('~/Universitat/7/APA/problemes/llista4/grupal/script.R')
bitsACorrompre <- sample(lletraCorrupta,nBitsCorruptes)
corrompreLletra(data[1,])
source('~/Universitat/7/APA/problemes/llista4/grupal/script.R')
corrompreLletra(data[1,])
source('~/Universitat/7/APA/problemes/llista4/grupal/script.R')
corrompreLletra(data[1,])
data[1,]
corrompreLletra(data[1,])
corrompreLletra(data[1,])
rpois(n=1,lambda=1.01)
rpois(n=1,lambda=1.01)
rpois(n=1,lambda=1.01)
rpois(n=1,lambda=1.01)
rpois(n=1,lambda=1.01)
rpois(n=1,lambda=1.01)
generarLletresCorruptes(data,1)
source('~/Universitat/7/APA/problemes/llista4/grupal/script.R')
generarLletresCorruptes(data,1)
source('~/Universitat/7/APA/problemes/llista4/grupal/script.R')
source('~/Universitat/7/APA/problemes/llista4/grupal/script.R')
source('~/Universitat/7/APA/problemes/llista4/grupal/script.R')
generarLletresCorruptes(data,1)
data.frame(apply(corrompreLletra,data))
source('~/Universitat/7/APA/problemes/llista4/grupal/script.R')
generarLletresCorruptes(data,1)
data[1,36]
l <- data[1,]
l[1,36]
l <- lletres[1,]
l <- data[1,]
l
l[1,36]
l[36]
source('~/Universitat/7/APA/problemes/llista4/grupal/script.R')
corrompreLletra(data[1,])
source('~/Universitat/7/APA/problemes/llista4/grupal/script.R')
corrompreLletra(data[1,])
corrompreLletra(data[2,])
corrompreLletra(data[2,])
corrompreLletra(data[2,])
corrompreLletra(data[2,])
corrompreLletra(data[2,])
data.frame(mapply(corrompreLletra,data))
data.frame(apply(corrompreLletra,data))
data.frame(apply(data,corrompreLletra))
data.frame(apply(data,FUN=corrompreLletra))
data.frame(apply(data,1,FUN=corrompreLletra))
